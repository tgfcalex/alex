#################################################### private location ###############################################################
server {
    listen 80;
    server_name lotterybox.com gamebox.com sportbox.com;
    root /usr/local/openresty/nginx/html/;

    location = /__check              {default_type  text/plain;}
    location = /robots.txt           {default_type  text/plain;}

    # ------------------------ dayu OP API---------------
    location ~ /__dayu_op/api/(v[0-9]+)/([-_a-zA-Z0-9]+) {
        set $version $1;
        set $file    $2;
        rewrite_by_lua_file  /usr/local/openresty/nginx/script/lua/dayu/rewrite.lua;
        access_by_lua_file   /usr/local/openresty/nginx/script/lua/dayu/access.lua;
        content_by_lua_file  /usr/local/openresty/nginx/script/lua/dayu/$version/$file.lua;
    }

    # ngx 自带状态监控页
    location /__ngx_status {
        allow 127.0.0.1;
        deny all;
        stub_status on;
        access_log off;
    }

    location = /__ip {
        content_by_lua_block {
            local ip = ngx.var["arg_ip"]
            local r = search_location_by_ip(ip)
            ngx.header['Content-Type'] = 'text/plain'
            if r == nil then
                ngx.say('未找到');
            else
                ngx.say(r[1]..' '..r[2]..' '..r[3]..' '..r[4])
            end
            ngx.exit(200)
        }
    }
 
    # 提供查询外围服务器系统时间接口 curl -H 'Host:gamebox.com' http://<DOMAIN>/__get_server_systime
    location = /__get_server_systime {
        default_type 'text/plain';
        content_by_lua_block {
            local nowtime = os.time()
            if nowtime ~= nil then
                ngx.say(nowtime)
                ngx.exit(200)
            else
                ngx.exit(404)
            end
        }
    }

    location = /__dns {
        content_by_lua_block {
            local resolver = require "resty.dns.resolver"
            local r, err = resolver:new{
                nameservers = {"8.8.8.8", {"8.8.4.4", 53} },
                retrans = 5,  -- 5 retransmissions on receive timeout
                timeout = 2000,  -- 2 sec
            }

            if not r then
                ngx.say("failed to instantiate the resolver: ", err)
                return
            end

            local domain = ngx.var["arg_domain"]
            local answers, err = r:query(domain)
            if not answers then
                ngx.say(err)
                return
            end

            if answers.errcode then
                ngx.say(answers.errcode, ":", answers.errstr)
            end

            for i, ans in ipairs(answers) do
                ngx.say(ans.name, ":", ans.address or ans.cname, " type:", ans.type, " class:", ans.class, " ttl:", ans.ttl)
            end
        }
    }
}
